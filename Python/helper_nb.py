# -*- coding: utf-8 -*-
"""helper_nb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C4wYC6lQ1ApU6pIaYty76j1a89ceDZTm
"""

"""
Hussain Khajanchi - DCNN Senior Project

Random Python functions to avoid tedious retyping of commands/assignments for Verilog/Vivado HLS

"""



def generate_kernel_ports(num_ports):

  kernel_type = "kernel_t "
  var_generic = "kernel_patch_"

  kernel_vars = []

  for i in range(num_ports):

    curr_kernel_var = var_generic + "{}".format(str(i))

    curr_kernel_port = kernel_type + curr_kernel_var + ","

    # print(curr_kernel_port)

    kernel_vars.append(curr_kernel_var)

  
  return kernel_vars


def generate_pixel_ports(num_ports):


    pixel_type = "pixel_t "
    var_generic = "pixel_window_"

    pixel_vars = []

    for i in range(num_ports):

      curr_pixel_var = var_generic + "{}".format(str(i))

      curr_pixel_port = pixel_type + curr_pixel_var + ","

      # print(curr_pixel_port)

      pixel_vars.append(curr_pixel_var)

    return pixel_vars


def print_mult_instants(mult_vars, num_mults):

  for i in range(num_mults):

    print("fm_t " + mult_vars[i] + ";")


def print_multiply_cmds(kernel_vars,pixel_vars,num_vars):


  mult_vars = []
  for i in range(num_vars):

    mult_var_curr = "mult_buf_{}".format(i)
    curr_mult_cmd = "mult_buf_{} = {} * {} ; ".format(i, kernel_vars[i], pixel_vars[i])
    print(curr_mult_cmd)
    mult_vars.append(mult_var_curr)


  return mult_vars


def print_add_cmds(mult_vars,num_vars):


  j = 0


  for i in range(7):

    print("intermediate_add[{}] = {} + {} + {} + {} + {} + {} + {};".format(i, mult_vars[j], mult_vars[j+1], mult_vars[j+2], mult_vars[j+3], mult_vars[j+4], mult_vars[j+5], mult_vars[j+6]))
      
    j = j + 7


def print_uut_instantiation(num_vars):


  kernel_var_generic = "fp_kernel"
  pixel_var_generic = "fp_pixels"

  for i in range(num_vars):

    print(kernel_var_generic + "[{}]".format(i) + ",")

  for i in range (num_vars):
    print(pixel_var_generic + "[{}]".format(i) + ",")


def print_mult_pragmas(num_mults):

  mult_var_generic = "mult_buf_"

  for i in range(num_mults):
    mult_var_curr = mult_var_generic + str(i)
    print_cmd = "#pragma HLS resource variable={} core=DSP48".format(mult_var_curr)

    if (i % 7 == 0):
      print("")

    # pyperclip.copy(print_cmd)

    print(print_cmd)


def print_verilog_outports(num_ports):

  current_ports = []

  port_cmd_generic = "output [7:0] kernel_reg_"

  for i in range(num_ports):

    current_port = port_cmd_generic + "{}".format(i) + ","
    print(current_port)
    current_ports.append(current_port)


  return current_ports

def print_verilog_assigns(num_outputs):


  for i in range(num_outputs):
    cmd = "assign kernel_reg_{} = kernel_regs[{}] ;".format(i,i)
    print(cmd)



def print_sop_inputs(num_inputs):

  for i in range(num_inputs):

    cmd_1 = "input [7:0] img_window_{},".format(i)

    print(cmd_1)

  for i in range(num_inputs):

    cmd_2 = "input [7:0] kernel_{},".format(i)

    print(cmd_2)


def print_ip_ports(num_ports):

  for i in range(num_ports):
    cmd = ".kernel_patch_{}_V(kernel_{}),".format(i,i)
    print(cmd)

  for i in range(num_ports):
    cmd = ".pixel_window_{}_V(img_window_{}),".format(i,i)
    print(cmd)

print_ip_ports(49)

kernel_vars = generate_kernel_ports(49)
pixel_vars = generate_pixel_ports(49)

mult_vars = print_multiply_cmds(kernel_vars,pixel_vars,49)

print_mult_instants(mult_vars,49)

print_mult_pragmas(49)

!pip install pyperclip

